{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export function initEyeOnIt(): void {\r\n  let isFocused = false;\r\n\r\n  // \uC6C0\uC9C1\uC774\uB294 point, \uB9C8\uC6B0\uC2A4 \uC6C0\uC9C1\uC774\uB294 \uC601\uC5ED, input, textarea\r\n  const points: NodeListOf<Element> = document.querySelectorAll(\".eye-point\");\r\n  const containers: NodeListOf<Element> =\r\n    document.querySelectorAll(\".eye-container\");\r\n  const inputs: NodeListOf<Element> = document.querySelectorAll(\".eye-input\");\r\n  const textareas: NodeListOf<Element> =\r\n    document.querySelectorAll(\".eye-textarea\");\r\n\r\n  points.forEach((point) => {\r\n    const pointParent = point.parentElement;\r\n    if (!pointParent) return;\r\n    pointParent.classList.add(\"eye-pointParent\");\r\n    point.classList.add(\"eye-point\");\r\n  });\r\n\r\n  // \uC774\uBCA4\uD2B8 \uCD94\uAC00\r\n  containers.forEach((el) => {\r\n    el.addEventListener(\"mousemove\", (e) => {\r\n      if (!isFocused || el.classList.contains(\"always\"))\r\n        mouseCalc(e as MouseEvent);\r\n    });\r\n  });\r\n\r\n  inputs.forEach((el) => {\r\n    el.addEventListener(\"input\", (e) => {\r\n      inputCalc(el as HTMLElement, e);\r\n    });\r\n    el.addEventListener(\"focus\", () => {\r\n      isFocused = true;\r\n    });\r\n    el.addEventListener(\"blur\", () => {\r\n      isFocused = false;\r\n    });\r\n  });\r\n\r\n  textareas.forEach((el) => {\r\n    el.addEventListener(\"input\", (e) => {\r\n      textareaCalc(el as HTMLElement, e as InputEvent);\r\n    });\r\n    el.addEventListener(\"focus\", () => {\r\n      isFocused = true;\r\n    });\r\n    el.addEventListener(\"blur\", () => {\r\n      isFocused = false;\r\n    });\r\n  });\r\n\r\n  // point\uB97C \uC6C0\uC9C1\uC774\uB294 \uD568\uC218, \uBD80\uBAA8 \uAE30\uC900\uC73C\uB85C \uB3D9\uADF8\uB780 \uBAA8\uC591\uAE4C\uC9C0\uB9CC \uC6C0\uC9C1\uC784\r\n  const movePoints = ({ x, y }: { x: number; y: number }) => {\r\n    points.forEach((point) => {\r\n      const pointParent = point.parentElement;\r\n      if (!pointParent) return;\r\n      const eyeRect = pointParent.getBoundingClientRect();\r\n      const eyeX = eyeRect.left + eyeRect.width / 2;\r\n      const eyeY = eyeRect.top + eyeRect.height / 2;\r\n\r\n      const deltaX = x - eyeX;\r\n      const deltaY = y - eyeY;\r\n      const distance = Math.sqrt(deltaX ** 2 + deltaY ** 2);\r\n      const maxDistanceX =\r\n        eyeRect.width / 2 - (point as HTMLElement).offsetWidth / 2;\r\n      const maxDistanceY =\r\n        eyeRect.height / 2 - (point as HTMLElement).offsetHeight / 2;\r\n\r\n      const moveX = (deltaX / distance) * Math.min(distance, maxDistanceX);\r\n      const moveY = (deltaY / distance) * Math.min(distance, maxDistanceY);\r\n\r\n      (\r\n        point as HTMLElement\r\n      ).style.transform = `translate(${moveX}px, ${moveY}px)`;\r\n    });\r\n  };\r\n\r\n  // text \uD06C\uAE30 \uD655\uC778\uC744 \uC704\uD55C el\uB4E4\r\n  const layoutTrash = document.createElement(\"div\");\r\n  layoutTrash.className = \"eye-layoutTrash\";\r\n  document.body.appendChild(layoutTrash);\r\n\r\n  const inputSpan = document.createElement(\"span\");\r\n  inputSpan.className = \"eye-hidden eye-inputSpan\";\r\n\r\n  const textareaDiv = document.createElement(\"div\");\r\n  textareaDiv.className = \"eye-hidden eye-textareaDiv\";\r\n\r\n  layoutTrash.appendChild(inputSpan);\r\n  layoutTrash.appendChild(textareaDiv);\r\n\r\n  // input text \uD06C\uAE30 \uD655\uC778\r\n  const getTextWidth = (text: string, input: HTMLElement) => {\r\n    const style = window.getComputedStyle(input);\r\n    inputSpan.style.font = style.font;\r\n    inputSpan.style.letterSpacing = style.letterSpacing;\r\n    inputSpan.style.fontSize = style.fontSize;\r\n    inputSpan.style.fontFamily = style.fontFamily;\r\n    inputSpan.style.fontWeight = style.fontWeight;\r\n    inputSpan.style.maxWidth = `calc(calc(${style.width} - ${style.paddingLeft}) - ${style.paddingRight})`;\r\n    inputSpan.textContent = text || \" \";\r\n\r\n    const width = inputSpan.offsetWidth;\r\n\r\n    return { width };\r\n  };\r\n\r\n  // textarea text \uD06C\uAE30 \uD655\uC778\r\n  const getTextareaSize = (text: string, textarea: HTMLElement) => {\r\n    const style = window.getComputedStyle(textarea);\r\n\r\n    textareaDiv.style.font = style.font;\r\n    textareaDiv.style.letterSpacing = style.letterSpacing;\r\n    textareaDiv.style.fontSize = style.fontSize;\r\n    textareaDiv.style.fontFamily = style.fontFamily;\r\n    textareaDiv.style.fontWeight = style.fontWeight;\r\n    textareaDiv.style.lineHeight = style.lineHeight;\r\n    textareaDiv.style.maxWidth = `calc(calc(${style.width} - ${style.paddingLeft}) - ${style.paddingRight})`;\r\n    textareaDiv.style.maxHeight = `calc(calc(${style.height} - ${style.paddingTop}) - ${style.paddingBottom})`;\r\n\r\n    textareaDiv.textContent = text || \" \";\r\n\r\n    const width = textareaDiv.offsetWidth;\r\n    const height = textareaDiv.offsetHeight;\r\n\r\n    return { width, height };\r\n  };\r\n\r\n  // \uB9C8\uC6B0\uC2A4 \uC704\uCE58 \uACC4\uC0B0\r\n  let animationFrameId: number | null = null;\r\n\r\n  const mouseCalc = (e: MouseEvent) => {\r\n    if (animationFrameId) return;\r\n    animationFrameId = requestAnimationFrame(() => {\r\n      movePoints({\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n      });\r\n      animationFrameId = null;\r\n    });\r\n  };\r\n\r\n  // input \uC785\uB825\uB418\uACE0 \uC788\uB294 \uC704\uCE58 \uACC4\uC0B0\r\n  const inputCalc = (el: HTMLElement, e: Event) => {\r\n    const style = window.getComputedStyle(el);\r\n    const elRect = el.getBoundingClientRect();\r\n    const paddingLeft = parseFloat(style.paddingLeft);\r\n    const paddingTop = parseFloat(style.paddingTop);\r\n    const paddingBottom = parseFloat(style.paddingBottom);\r\n    const { width } = getTextWidth((e.target as HTMLInputElement).value, el);\r\n\r\n    movePoints({\r\n      x: elRect.left + paddingLeft + width,\r\n      y:\r\n        elRect.top +\r\n        (elRect.height - paddingTop - paddingBottom) / 2 +\r\n        paddingTop,\r\n    });\r\n  };\r\n\r\n  // textarea \uC785\uB825\uB418\uACE0 \uC788\uB294 \uC704\uCE58 \uACC4\uC0B0\r\n  const textareaCalc = (el: HTMLElement, e: Event) => {\r\n    const style = window.getComputedStyle(el);\r\n    const elRect = el.getBoundingClientRect();\r\n    const paddingLeft = parseFloat(style.paddingLeft);\r\n    const paddingTop = parseFloat(style.paddingTop);\r\n    const { width, height } = getTextareaSize(\r\n      (e.target as HTMLInputElement).value,\r\n      el\r\n    );\r\n\r\n    movePoints({\r\n      x: elRect.left + paddingLeft + width,\r\n      y: elRect.top + paddingTop + height,\r\n    });\r\n  };\r\n}\r\n\r\nconst eyeOnIt = {\r\n  initEyeOnIt: initEyeOnIt,\r\n};\r\n\r\nexport default eyeOnIt;\r\n"],
  "mappings": "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",
  "names": ["initEyeOnIt", "isFocused", "points", "containers", "inputs", "textareas", "point", "pointParent", "el", "e", "mouseCalc", "inputCalc", "textareaCalc", "movePoints", "x", "y", "eyeRect", "eyeX", "eyeY", "deltaX", "deltaY", "distance", "maxDistanceX", "maxDistanceY", "moveX", "moveY", "layoutTrash", "inputSpan", "textareaDiv", "getTextWidth", "text", "input", "style", "getTextareaSize", "textarea", "width", "height", "animationFrameId", "elRect", "paddingLeft", "paddingTop", "paddingBottom", "eyeOnIt", "index_default"]
}
